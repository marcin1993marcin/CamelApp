/**
 * This class is generated by jOOQ
 */
package com.app.camel.model.tables;


import com.app.camel.model.Keys;
import com.app.camel.model.Library;
import com.app.camel.model.tables.records.UserProjectsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProjects extends TableImpl<UserProjectsRecord> {

    private static final long serialVersionUID = -2057511699;

    /**
     * The reference instance of <code>library.user_projects</code>
     */
    public static final UserProjects USER_PROJECTS = new UserProjects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectsRecord> getRecordType() {
        return UserProjectsRecord.class;
    }

    /**
     * The column <code>library.user_projects.Users_id</code>.
     */
    public final TableField<UserProjectsRecord, Integer> USERS_ID = createField("Users_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>library.user_projects.Projects_id</code>.
     */
    public final TableField<UserProjectsRecord, Integer> PROJECTS_ID = createField("Projects_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>library.user_projects</code> table reference
     */
    public UserProjects() {
        this("user_projects", null);
    }

    /**
     * Create an aliased <code>library.user_projects</code> table reference
     */
    public UserProjects(String alias) {
        this(alias, USER_PROJECTS);
    }

    private UserProjects(String alias, Table<UserProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProjects(String alias, Table<UserProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Library.LIBRARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserProjectsRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROJECTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProjectsRecord>>asList(Keys.KEY_USER_PROJECTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserProjectsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserProjectsRecord, ?>>asList(Keys.FK_USERS_HAS_PROJECTS_USERS, Keys.FK_USERS_HAS_PROJECTS_PROJECTS1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserProjects as(String alias) {
        return new UserProjects(alias, this);
    }

    /**
     * Rename this table
     */
    public UserProjects rename(String name) {
        return new UserProjects(name, null);
    }
}
